<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns:rng="http://relaxng.org/ns/structure/1.0"
  xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns="http://www.tei-c.org/ns/1.0">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>MEI customisation for source-based encoding of mensural music. Based on MEI page
          based customisation.</title>
        <respStmt>
          <resp>Authored by:</resp>
          <name xml:id="AP">Anna Plaksin</name>
        </respStmt>
      </titleStmt>
      <publicationStmt>
        <p>This customization is published alongside with the software Mensuraligner.</p>
      </publicationStmt>
      <sourceDesc>
        <p>Based on the MEI page based customization, developed and used for <ref target="https://www.verovio.org/structure.xhtml">Verovio</ref>
          see <ref target="https://github.com/music-encoding/mei-incubator/tree/master/page-based">MEI Incubator</ref>.</p>
      </sourceDesc>
    </fileDesc>
  </teiHeader>
  <text>
    <body>
      <schemaSpec ident="mei" start="mei music" ns="http://www.music-encoding.org/ns/mei"
        prefix="mei_">
        
        <!-- Declare MEI and XLink namespaces for use in Schematron -->
        <constraintSpec ident="set_ns" mode="add" scheme="schematron">
          <constraint>
            <sch:ns xmlns:sch="http://purl.oclc.org/dsdl/schematron" prefix="mei" uri="http://www.music-encoding.org/ns/mei"/>
            <sch:ns xmlns:sch="http://purl.oclc.org/dsdl/schematron" prefix="xlink" uri="http://www.w3.org/1999/xlink"/>
          </constraint>
        </constraintSpec>

        <moduleRef key="MEI"/>
        <moduleRef key="MEI.shared"/>
        <moduleRef key="MEI.header"/>
        <!-- Disable CMN module -->
        <!--<moduleRef key="MEI.cmn"/>-->
        <moduleRef key="MEI.mensural"/>
        <!-- Disable neumes module -->
        <!--<moduleRef key="MEI.neumes"/>-->
        <moduleRef key="MEI.analysis"/>
        <!-- Disable CMN ornaments module -->
        <!--<moduleRef key="MEI.cmnOrnaments"/>-->
        <!-- disable corpus module -->
        <!-- <moduleRef key="MEI.corpus"/> -->
        <moduleRef key="MEI.critapp"/>
        <moduleRef key="MEI.edittrans"/>
        <!-- disable facsimile module -->
        <!-- <moduleRef key="MEI.facsimile"/> -->
        <!-- disable figures & tables -->
        <!-- <moduleRef key="MEI.figtable"/> -->
        <moduleRef key="MEI.frbr"/>
        <!-- disable harmony -->
        <!-- <moduleRef key="MEI.harmony"/> -->
        <!-- disable linkalign (see page-based) -->
        <!-- <moduleRef key="MEI.linkalign"/>-->
        <moduleRef key="MEI.lyrics"/>
        <!-- Disable MIDI module -->
        <!-- <moduleRef key="MEI.midi"/> -->
        <moduleRef key="MEI.namesdates"/>
        <!-- disable performances -->
        <!-- <moduleRef key="MEI.performance"/> -->
        <moduleRef key="MEI.ptrref"/>
        <!-- Disable tabulatures -->
        <!-- <moduleRef key="MEI.tablature"/> -->
        <moduleRef key="MEI.text"/>
        <moduleRef key="MEI.usersymbols"/>

        <!-- Disable CMN-specific model classes in the shared module -->
        <classSpec ident="model.sectionPart.cmn" module="MEI.shared" type="model" mode="delete"/>
        <classSpec ident="model.layerPart.cmn" module="MEI.shared" type="model" mode="delete"/>

        <!-- Add new pageBased module -->
        <moduleSpec ident="MEI.pageBased" mode="add">
          <desc>Allows page-by-page markup.</desc>
        </moduleSpec>

        <!-- Add new attribute classes -->
        <classSpec ident="att.surface" module="MEI.pageBased" type="atts" mode="add">
          <desc>This attribute is used to point to a surface.</desc>
          <attList>
            <attDef ident="surface" usage="opt">
              <desc>contains a reference to a surface element</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
       
        <!-- Add new models -->
        <classSpec ident="model.pagesLike" type="model" module="MEI.pageBased" mode="add">
          <desc>Collects elements that group pages.</desc>
        </classSpec>
        <classSpec ident="model.pageLike" type="model" module="MEI.pageBased" mode="add">
          <desc>Page-like elements.</desc>
        </classSpec>
        <classSpec ident="model.systemLike" type="model" module="MEI.pageBased" mode="add">
          <desc>Collects systemLike elements.</desc>
        </classSpec>
        <classSpec ident="model.secbLike" type="model" module="MEI.pageBased" mode="add">
          <desc>Collects elements that represent a section break.</desc>
        </classSpec>
        
        <!-- Add schematron rules that disallow pb and sb within page-based markup -->
        <elementSpec ident="pb" module="MEI.shared" mode="replace">
          <desc>(page break) – An empty formatting element that forces text to begin on a new
            page.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.pointing"/>
            <memberOf key="att.source"/>
            <memberOf key="att.pb.anl"/>
            <memberOf key="att.pb.ges"/>
            <memberOf key="att.pb.log"/>
            <memberOf key="att.pb.vis"/>
            <memberOf key="model.pbLike"/>
          </classes>
          <content>
            <rng:ref name="macro.metaLike.page"/>
          </content>
          <constraintSpec ident="pbAncestors" scheme="schematron">
            <constraint>
              <sch:rule context="mei:pb">
                <sch:assert test="not(ancestor::mei:pages)">The pb element is not allowed within
                  page-based markup.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>The <att>n</att> attribute should be used to record the page number displayed in the
              source. It need not be an integer, e.g., 'iv', or 'p17-3'. The logical page number can
              be calculated by counting previous <gi scheme="MEI">pb</gi> ancestor elements. When
              used in a score context, a page break implies an accompanying system break.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="sb" module="MEI.shared" mode="replace">
          <desc>(system break) – An empty formatting element that forces musical notation to begin
            on a new line.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.source"/>
            <memberOf key="att.sb.log"/>
            <memberOf key="att.sb.vis"/>
            <memberOf key="att.sb.ges"/>
            <memberOf key="att.sb.anl"/>
            <memberOf key="model.milestoneLike.music"/>
          </classes>
          <content>
            <rng:optional>
              <rng:ref name="custos"/>
            </rng:optional>
          </content>
          <constraintSpec ident="sbAncestors" scheme="schematron">
            <constraint>
              <sch:rule context="mei:sb">
                <sch:assert test="not(ancestor::mei:pages)">The sb element is not allowed within
                  page-based markup.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>Do not confuse this element with the <gi scheme="MEI">lb</gi> element, which performs
              a similar function in prose.</p>
          </remarks>
        </elementSpec>
        
        <!-- Add new elements -->
        <elementSpec ident="pages" module="MEI.pageBased" mode="add">
          <desc>A set of pages in a page-based encoding.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.common.anl"/>
            <!--<memberOf key="att.scoreDef.vis"/>-->
            <memberOf key="att.pages"/>
            <memberOf key="att.spacing"/>
            <memberOf key="att.systems"/>
            <memberOf key="att.positioning"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.pagesLike"/>
          </classes>
          <content>
            <rng:optional>
              <rng:ref name="model.scoreDefLike"/>
            </rng:optional>
            <rng:zeroOrMore>
              <!--<rng:choice>-->
              <rng:ref name="model.pageLike"/>
              <!--<rng:ref name="model.scoreDefLike"/>-->
              <!--</rng:choice>-->
            </rng:zeroOrMore>
          </content>
        </elementSpec>
        
        <elementSpec ident="page" module="MEI.pageBased" mode="add">
          <desc>A single page in a page-based encoding.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.common.anl"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.positioning"/>
            <memberOf key="att.surface"/>
            <memberOf key="model.pageLike"/>
            <memberOf key="att.spacing"/>
            <memberOf key="att.systems"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="model.scoreDefLike"/>
                <rng:ref name="model.secbLike"/>
                <rng:ref name="model.systemLike"/>
                <!-- added for mensural source description -->
                <rng:ref name="model.choirbookLike"/>
                <rng:ref name="model.addLyrics"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <!-- Redeclare att.pages class to remove leading "page." -->
          <attList>
            <attDef ident="height" usage="opt">
              <desc>specifies the height of the page; may be expressed in real-world units or staff
                steps.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="width" usage="opt">
              <desc>describes the width of the page; may be expressed in real-world units or staff
                steps.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="topmar" usage="opt">
              <desc>indicates the amount of whitespace at the top of a page.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="botmar" usage="opt">
              <desc>indicates the amount of whitespace at the bottom of a page.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="leftmar" usage="opt">
              <desc>indicates the amount of whitespace at the left side of a page.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="rightmar" usage="opt">
              <desc>indicates the amount of whitespace at the right side of a page.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="panels" usage="opt">
              <desc>indicates the number of logical pages to be rendered on a single physical
                page.</desc>
              <datatype>
                <rng:ref name="data.PAGE.PANELS"/>
              </datatype>
            </attDef>
            <attDef ident="scale" usage="opt">
              <desc>indicates how the page should be scaled when rendered.</desc>
              <datatype>
                <rng:ref name="data.PGSCALE"/>
              </datatype>
            </attDef>
          </attList>
        </elementSpec>
        
        <elementSpec ident="system" module="MEI.pageBased" mode="add">
          <desc>A system in a page-based encoding.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.positioning"/>
            <memberOf key="att.sb.log"/>
            <memberOf key="att.sb.vis"/>
            <memberOf key="att.sb.ges"/>
            <memberOf key="att.sb.anl"/>
            <memberOf key="att.source"/>
            <memberOf key="att.visualoffset.vo"/>
            <memberOf key="att.visualoffset2.ho"/>
            <memberOf key="model.systemLike"/>
            <memberOf key="att.spacing"/>
            <memberOf key="att.staffGrp.vis"/>
            <!--<memberOf key="att.systems"/>-->
          </classes>
          <content>
            <!--<rng:optional>
              <rng:ref name="model.staffGrpLike"/>
            </rng:optional>-->
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="model.measureLike"/>
                <rng:ref name="model.scoreDefLike"/>
                <rng:ref name="model.secbLike"/>
                <rng:ref name="model.staffLike"/>
                <!-- added lyrics container for mensural source description -->
                <rng:ref name="model.lyricsLike"/>
                <!-- added edit and transcription elements -->
                <rng:ref name="model.transcriptionLike"/>
                <rng:ref name="model.editLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <!-- Redeclare att.systems class to remove leading 'system.' -->
          <attList>
            <attDef ident="leftline" usage="opt">
              <desc>indicates whether the staves are joined at the left by a continuous line. The
                default value is "true". Do not confuse this with a line used as a grouping
                symbol.</desc>
              <datatype>
                <rng:ref name="data.BOOLEAN"/>
              </datatype>
            </attDef>
            <attDef ident="leftmar" usage="opt">
              <desc>describes the amount of whitespace at the left system margin relative to
                page.leftmar.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="rightmar" usage="opt">
              <desc>describes the amount of whitespace at the right system margin relative to
                page.rightmar.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="topmar" usage="opt">
              <desc>describes the distance from page's top edge to the first system; used for first
                page only.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
          </attList>
        </elementSpec>
        
        <!-- secb uses most of the same attributes as section, but is empty. -->
        <elementSpec ident="secb" module="MEI.pageBased" mode="add">
          <desc>A section break milestone element.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.declaring"/>
            <memberOf key="att.typed"/>
            <memberOf key="att.pointing"/>
            <memberOf key="att.section.log"/>
            <memberOf key="att.section.vis"/>
            <memberOf key="att.section.ges"/>
            <memberOf key="att.section.anl"/>
            <memberOf key="model.secbLike"/>
          </classes>
        </elementSpec>
        
        <!-- Make elements participating in att.facsimile also members of att.coordinated. -->
        <classSpec ident="att.facsimile" module="MEI.pageBased" type="atts" mode="replace">
          <desc>Attributes that associate a feature corresponding with all or part of an
            image.</desc>
          <classes>
            <memberOf key="att.coordinated"/>
          </classes>
          <attList>
            <attDef ident="facs" usage="opt">
              <desc>permits the current element to reference a facsimile image or image zone which
                corresponds to it.</desc>
              <datatype>
                <rng:ref name="data.URIS"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        
        <!-- Revise model of mdiv -->
        <elementSpec ident="mdiv" module="MEI.shared" mode="replace">
          <desc>(musical division) – contains a subdivision of the body of a musical text.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.declaring"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="model.mdivLike"/>
          </classes>
          <content>
            <rng:choice>
              <rng:group>
                <rng:optional>
                  <rng:ref name="model.scoreLike"/>
                </rng:optional>
                <rng:optional>
                  <rng:ref name="model.partsLike"/>
                </rng:optional>
                <rng:optional>
                  <rng:ref name="model.pagesLike"/>
                </rng:optional>
              </rng:group>
              <rng:zeroOrMore>
                <rng:ref name="model.mdivLike"/>
              </rng:zeroOrMore>
            </rng:choice>
          </content>
          <attList>
            <!-- add type specification -->
            <attDef ident="type" usage="opt">
              <desc>specifies how mdiv is used in source encoding, to group voices or
                sections.</desc>
              <valList type="closed">
                <valItem ident="part">
                  <desc>Mdiv per part. Common for part books.</desc>
                </valItem>
                <valItem ident="section">
                  <desc>Mdiv per section. Common for choir books.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
          <remarks>
            <p>The <gi scheme="MEI">mdiv</gi> element may contain one or all of three possible views
              of the music. The score view is the traditional full and open score while the parts
              view contains each performer's view of the score; that is, his part. These two views
              are necessary because it is not always possible or desirable to generate one from the
              other. The <gi scheme="MEI">score</gi> and <gi scheme="MEI">parts</gi> elements are
              placed here and not directly within the <gi scheme="MEI">body</gi> element because
              score and part characteristics may change from <gi scheme="MEI">mdiv</gi> to <gi
                scheme="MEI">mdiv</gi>. For example, the 2nd movement of a symphony may require
              different performing forces (and therefore different score and part layout) than the
              other movements. The <gi scheme="MEI">mdiv</gi> element may be recursively nested in
              order to represent music which exhibits this kind of structure. For example, an opera
              is normally divided into acts, which are in turn divided into scenes. The third
              possibility for structuring an <gi scheme="MEI">mdiv</gi> is as a collection of pages.
              In this view, <gi scheme="page">page</gi> and <gi scheme="MEI">system</gi> elements
              are the principal organizing features of the markup.</p>
          </remarks>
        </elementSpec>

        <!-- Add new sourceEncoding module -->
        <moduleSpec ident="MEI.sourceEncoding" mode="add">
          <desc>Allows encoding of choir book layout on page based layout.</desc>
        </moduleSpec>

        <!-- Adding model for choirbook layout -->
        <classSpec ident="model.choirbookLike" type="model" module="MEI.sourceEncoding" mode="add">
          <desc>Collects elements used to describe the layout of a renaissance choir book.</desc>
        </classSpec>

        <!-- Adding model for additional lyrics -->
        <classSpec ident="model.addLyrics" type="model" module="MEI.sourceEncoding" mode="add">
          <desc>Collects elements used to encode additional lyrics independent from musical
            staves.</desc>
        </classSpec>

        <!-- Adding new element panel -->
        <elementSpec ident="panel" module="MEI.sourceEncoding" mode="add"
          ns="http://github.com/annplaksin/mensural_sourceEncoding">
          <desc>Container for musical content of one voice panel in choir book layout.</desc>
          <classes>
            <memberOf key="att.common"/>
            <!--<memberOf key="att.commonPart"/>-->
            <memberOf key="att.declaring"/>
            <memberOf key="att.common.anl"/>
            <memberOf key="model.choirbookLike"/>
          </classes>
          <content>
            <rng:oneOrMore>
              <rng:choice>
                <rng:ref name="model.systemLike"/>
              </rng:choice>
            </rng:oneOrMore>
          </content>
          <!-- redeclare att.panels to remove leading "panel." -->
          <attList>
            <attDef ident="leftmar" usage="opt">
              <desc>describes the amount of whitespace at the left panel margin relative to
                page.leftmar.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="rightmar" usage="opt">
              <desc>describes the amount of whitespace at the right panel margin relative to
                page.rightmar.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="topmar" usage="opt">
              <desc>describes the distance from page's top edge to the first panel; used for first
                page only.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <!-- add type specification -->
            <attDef ident="type" usage="opt">
              <desc>specifies how mdiv is used in source encoding, to group voices or
                sections.</desc>
              <valList type="closed">
                <valItem ident="part">
                  <desc>Panel per part. Common for part books.</desc>
                </valItem>
                <valItem ident="section">
                  <desc>Panel per section. Common for choir books.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </elementSpec>

        <!-- Adding attributes for panel description -->
        <classSpec ident="att.panels" module="MEI.shared" type="atts" mode="add">
          <desc>Attributes that capture system layout information.</desc>
          <attList>
            <attDef ident="panel.leftmar" usage="opt">
              <desc>describes the amount of whitespace at the left panel margin relative to
                page.leftmar.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="panel.rightmar" usage="opt">
              <desc>describes the amount of whitespace at the right panel margin relative to
                page.rightmar.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="panel.topmar" usage="opt">
              <desc>describes the distance from page's top edge to the first panel; used for first
                page only.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>

        <!-- adding @lyricsline -->
        <classSpec ident="att.lyricsorder" module="MEI.sourceEncoding" type="atts" mode="add">
          <desc>Attributes that captures layout information of lyrics.</desc>
          <attList>
            <attDef ident="row" usage="opt" mode="add"
              ns="http://github.com/annplaksin/mensural_sourceEncoding">
              <desc>Counts rows of lyrics within a system.</desc>
              <datatype>
                <rng:data type="positiveInteger"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>

        <!-- adding lyric type -->
        <classSpec ident="att.lyricstype" module="MEI.sourceEncoding" type="atts" mode="add">
          <desc>Attributes to classify lyrics</desc>
          <attList>
            <attDef ident="lyric-type" usage="opt" mode="add"
              ns="http://github.com/annplaksin/mensural_sourceEncoding">
              <desc>Classifies the type of a lyric portion in a source.</desc>
              <valList type="closed">
                <valItem ident="full">
                  <desc>full lyrics below stave</desc>
                </valItem>
                <valItem ident="incipit">
                  <desc>only text incipit given</desc>
                </valItem>
                <valItem ident="additional">
                  <desc>additional lyrics independent of staves</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>

        <!-- Revisions of standard MEI starts here -->

        <!-- revised model of div -->
        <elementSpec ident="div" module="MEI.text" mode="change">
          <desc>(division) – Major structural division of text, such as a preface, chapter or
            section.
            <!--Often, the &lt;head&gt; sub-element identifies the &lt;div&gt;'s purpose. This element is
        modelled on an element in the Text Encoding Initiative (TEI).--></desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.declaring"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <!--<memberOf key="att.typed"/>-->
            <memberOf key="model.divLike"/>
            <memberOf key="model.addLyrics"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.milestoneLike.text"/>
            </rng:zeroOrMore>
            <rng:optional>
              <rng:ref name="model.headLike"/>
            </rng:optional>
            <rng:oneOrMore>
              <rng:choice>
                <rng:ref name="model.divLike"/>
                <rng:ref name="model.textcomponentLike"/>
              </rng:choice>
            </rng:oneOrMore>
            <rng:zeroOrMore>
              <rng:ref name="model.milestoneLike.text"/>
            </rng:zeroOrMore>
          </content>
        </elementSpec>

        <!-- revised lyrics element with lyricstype -->
        <elementSpec ident="lyrics" module="MEI.lyrics" mode="change">
          <desc>Vocally performed 'text' of a musical composition, such as a song or opera.
            <!-- The
        staff attribute gives the staff to which the lyrics are attached. If there is more than one
        layer on that staff, the layer attribute may be used to indicate the layer from which the
        rhythm should be taken. Often, automatic text underlay may rely on the notes of the
        indicated staff. When this is not desirable, however, the rhythm of the lyrics may be
        recorded in the rhythm attribute of the parent verse element.--></desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.lyrics.log"/>
            <!-- <memberOf key="att.lyrics.vis"/> -->
            <memberOf key="att.lyrics.ges"/>
            <memberOf key="att.lyrics.anl"/>
            <memberOf key="att.lyricstype"/>
            <memberOf key="model.lyricsLike"/>
            <memberOf key="model.addLyrics"/>
          </classes>
          <content>
            <rng:oneOrMore>
              <rng:ref name="model.verseLike"/>
            </rng:oneOrMore>
          </content>
          <!-- disallow lyrics element within layer -->
          <constraintSpec ident="lyricsAncestors" scheme="schematron">
            <constraint>
              <sch:rule context="mei:lyrics">
                <sch:assert test="not(ancestor::mei:layer)">The lyrics element is not allowed inside
                  of layer within mensural source encoding.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>

        <!-- added lyricsorder to verse -->
        <elementSpec ident="verse" module="MEI.lyrics" mode="change">
          <desc>Lyric verse.
            <!-- The lb element is allowed here in order to facilitate karaoke
        applications. The func attribute on lb may be used to distinguish true line ends from line
        group ends for these applications.--></desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.verse.log"/>
            <memberOf key="att.verse.vis"/>
            <memberOf key="att.verse.ges"/>
            <memberOf key="att.verse.anl"/>
            <memberOf key="att.lyricsorder"/>
            <memberOf key="model.verseLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="dir"/>
                <rng:ref name="dynam"/>
                <rng:ref name="tempo"/>
                <rng:ref name="space"/>
              </rng:choice>
            </rng:zeroOrMore>
            <rng:oneOrMore>
              <rng:ref name="model.sylLike"/>
            </rng:oneOrMore>
            <rng:zeroOrMore>
              <rng:ref name="model.lbLike"/>
            </rng:zeroOrMore>
          </content>
        </elementSpec>

        <elementSpec ident="section" module="MEI.shared" mode="change">
          <desc>Segment of music data.
            <!--Container for actual music data. Pointing attributes make it possible to
        connect this element to other internal or external entities, such as media objects or
        annotations.--></desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.declaring"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.typed"/>
            <memberOf key="att.pointing"/>
            <memberOf key="att.section.log"/>
            <memberOf key="att.section.vis"/>
            <memberOf key="att.section.ges"/>
            <memberOf key="att.section.anl"/>
            <memberOf key="model.sectionLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="expansion"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="model.appLike"/>
                <rng:ref name="model.divLike"/>
                <rng:ref name="model.milestoneLike.music"/>
                <rng:ref name="model.annotLike"/>
                <rng:ref name="model.graphicprimitiveLike"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
                <rng:ref name="model.sectionPart"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="Check_sectionexpansion" scheme="schematron">
            <constraint>
              <sch:rule context="mei:section[mei:expansion]">
                <sch:assert
                  test="descendant::mei:section|descendant::mei:ending|descendant::mei:rdg">Must
                  have descendant section, ending, or rdg elements that can be pointed
                  to.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <constraintSpec ident="sectionAncestors" scheme="schematron">
            <constraint>
              <sch:rule context="mei:section">
                <sch:assert test="not(ancestor::mei:pages)">The section element is not allowed
                  within page-based mensural source encoding.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>

        <!-- special adjustments of existing elements for notation purposes -->

        <!-- dot needs form attribute -->
        <elementSpec ident="dot" module="MEI.shared" mode="change">
          <desc>Dot of augmentation or division.
            <!-- This element provides an alternative to the dots
        attribute on chord, note, rest, space, tuplet, and tupletSpan elements. It should be used
        when specific display info, such as size or color, needs to be recorded for the dot. This
        element may also be used for dots of division in the mensural repertoire.--></desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.dot.log"/>
            <memberOf key="att.dot.vis"/>
            <memberOf key="att.dot.ges"/>
            <memberOf key="att.dot.anl"/>
            <memberOf key="model.noteModifierLike"/>
          </classes>
        </elementSpec>

        <elementSpec ident="note" module="MEI.shared" mode="change">
          <desc>A single pitched event.
            <!-- (Read, p. 63) The note element is allowed to contain
        other events for situations where a single (usually ornamented) written note is
        representative of a group of performed notes. The accid and artic sub-elements may be used
        instead of the note element's attributes when accid and artic represent first-class objects,
        e.g., when they require attributes, such as x and y location attributes. Similarly, the syl
        sub-element may be used instead of the syl attribute. The verse sub-element may be used to
        group text syllables by verse. The colored attribute may be used to indicate coloration. In
        the mensural repertoire, coloration is a temporary change in the underlying mensuration from
        perfect to imperfect. In the CMN repertoire, coloration is an inversion of the note head's
        normal rendition, that is, the note head is void when it would otherwise be filled and vice
        versa. Do not confuse this with visual color.--></desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.note.log"/>
            <memberOf key="att.note.vis"/>
            <memberOf key="att.note.ges"/>
            <!--<memberOf key="att.note.anl"/>-->
            <memberOf key="att.common.anl"/>
            <memberOf key="model.eventLike"/>
            <memberOf key="model.chordPart"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="model.noteModifierLike"/>
                <rng:ref name="model.appLike"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <!-- not recommended to allow encoding despite missing information -->
          <!--<attList>
            <attDef ident="dur" usage="rec" mode="change"/>
            <attDef ident="pname" usage="rec" mode="change"/>
            <attDef ident="oct" usage="rec" mode="change"/>
          </attList>-->
        </elementSpec>
        
        <!-- allow model.transcriptionLike and model.editLike within ligature -->
        <elementSpec ident="ligature" module="MEI.mensural" mode="change">
          <desc>A mensural notation symbol that combines two or more notes into a single sign.
            <!-- The rhythmic meaning of the components of a ligature is typically contextual, not
        absolute; therefore, an interpretative duration may be encoded on each of the components
        using either the dur.ges attribute or the num and numbase attribute pair. The
        &lt;ligature&gt; element should *not* be used for brackets in modern notation that indicate
        notes that were part of a ligature in the original source.--></desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.ligature.log"/>
            <memberOf key="att.ligature.vis"/>
            <memberOf key="att.ligature.ges"/>
            <memberOf key="att.ligature.anl"/>
            <memberOf key="model.eventLike.mensural"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="model.layerPart"/>
                <rng:ref name="model.transcriptionLike"/>
                <rng:ref name="model.editLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
        </elementSpec>

        <elementSpec ident="accid" module="MEI.shared" mode="change">
          <desc>(accidental) – Records a temporary alteration to the pitch of a note.
            <!-- An accidental may
        raise a pitch by one or two semitones or it may cancel a previous accidental or part of a
        key signature. This element provides an alternative to the accid and accid.ges attributes on
        the &lt;note&gt; element. The element should be used when specific display info, such as
        size or color, needs to be recorded for the accidental or when multiple accidentals occur on
        a single note. The func attribute can be used to differentiate between the accidental's
        functions, such as 'cautionary' or 'editorial'.--></desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.accid.log"/>
            <memberOf key="att.accid.vis"/>
            <memberOf key="att.accid.ges"/>
            <memberOf key="att.accid.anl"/>
            <memberOf key="model.noteModifierLike"/>
            <memberOf key="att.accid.pos"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
        </elementSpec>
       
        <!-- revision of mensur and proport -->
        <elementSpec ident="mensur" module="MEI.mensural" mode="change">
          <desc>(mensuration) – Collects information about the metrical relationship between a note
            value and the next smaller value; that is, either triple or duple.
            <!--The &lt;mensur&gt; element is provided for the encoding of mensural
        notation. The slash attribute indicates the
        number lines added to the mensuration sign. For example, one slash is added for what we now
        call 'alla breve'. --></desc>
          <classes>
            <!--<memberOf key="att.altsym"/>-->
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.mensur.log"/>
            <memberOf key="att.mensur.vis"/>
            <memberOf key="att.mensur.ges"/>
            <memberOf key="att.mensur.anl"/>
            <memberOf key="model.eventLike.mensural"/>
            <memberOf key="model.staffDefPart.mensural"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
        </elementSpec>
        
        <elementSpec ident="proport" module="MEI.mensural" mode="change">
          <desc>(proportion) – Description of note duration as arithmetic ratio.
            <!-- The &lt;proportion&gt;
        element is provided for the encoding of mensural notation. It allows the description of note
        durations as arithmetic ratios. While mensuration refers to the normal relationships between
        note durations, proportion affects the relations of the note durations to the tactus.--></desc>
          <classes>
            <!--<memberOf key="att.altsym"/>-->
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.proport.log"/>
            <memberOf key="att.proport.vis"/>
            <memberOf key="att.proport.ges"/>
            <memberOf key="att.proport.anl"/>
            <memberOf key="model.eventLike.mensural"/>
            <memberOf key="model.staffDefPart.mensural"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
        </elementSpec>
        
        <elementSpec ident="chord" module="MEI.shared" mode="replace">
          <desc>A simultaneous sounding of two or more notes in the same layer *with the same
            duration*.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <!--<memberOf key="att.chord.log"/>-->
            <memberOf key="att.chord.vis"/>
            <!--<memberOf key="att.chord.ges"/>-->
            <memberOf key="att.chord.anl"/>
            <memberOf key="model.eventLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="model.chordPart"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
        </elementSpec>

        <!-- New attribute class for relative accidental position -->
        <classSpec type="atts" ident="att.accid.pos" mode="add">
          <desc>Relative accidental to note position.</desc>
          <attList>
            <attDef ident="accidPos" ns="http://github.com/annplaksin/mensural_sourceEncoding">
              <desc>Relative position of an accidental to following note. Exact position could be
                given with other attributes.</desc>
              <valList type="closed">
                <valItem ident="before">
                  <desc>Accidental is in front of the note</desc>
                </valItem>
                <valItem ident="above">
                  <desc>Accidental is above the note</desc>
                </valItem>
                <valItem ident="below">
                  <desc>Accidental is below the note</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>

        <!-- Delete @syl, @accid & @dots  & att.note.log.cnm from note -->
        <classSpec ident="att.note.log" module="MEI.shared" type="atts" mode="change">
          <desc>Logical domain attributes.</desc>
          <classes>
            <memberOf key="att.event"/>
            <!--<memberOf key="att.articulation"/>-->
            <memberOf key="att.duration.musical"/>
            <memberOf key="att.fermatapresent"/>
            <memberOf key="att.pitched"/>
            <!--<memberOf key="att.slurpresent"/>
            <memberOf key="att.tiepresent"/>
            <memberOf key="att.tupletpresent"/>-->
            <memberOf key="att.note.log.mensural"/>
          </classes>
        </classSpec>

        <!-- Revision of att.note.ges -->
        <classSpec ident="att.note.ges" module="MEI.shared" type="atts" mode="replace">
          <desc>Gestural domain attributes.</desc>
          <classes>
            <memberOf key="att.accidental.performed"/>
            <!--<memberOf key="att.articulation.performed"/>
            <memberOf key="att.duration.performed"/>
            <memberOf key="att.instrumentident"/>
            <memberOf key="att.note.ges.cmn"/>-->
            <memberOf key="att.note.ges.mensural"/>
            <!--<memberOf key="att.note.ges.tablature"/>-->
          </classes>
          <attList>
            <attDef ident="oct.ges" usage="opt">
              <desc>records performed octave information that differs from the written value.</desc>
              <datatype>
                <rng:ref name="data.OCTAVE"/>
              </datatype>
            </attDef>
            <attDef ident="pname.ges" usage="opt">
              <desc>contains a performed pitch name that differs from the written value.</desc>
              <datatype>
                <rng:ref name="data.PITCHNAME.GES"/>
              </datatype>
            </attDef>
            <attDef ident="pnum" usage="opt">
              <desc>holds a pitch-to-number mapping, a base-40 or MIDI note number, for
                example.</desc>
              <datatype>
                <rng:ref name="data.PITCHNUMBER"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>

        <!-- Revision of att.syl.log -->
        <classSpec ident="att.syl.log" module="MEI.shared" type="atts" mode="change">
          <desc>Logical domain attributes.</desc>
          <attList>
            <attDef ident="con" usage="opt" mode="replace">
              <desc>describes the symbols typically used to indicate breaks between syllables and
                their functions.</desc>
              <valList type="closed">
                <valItem ident="s">
                  <desc>space (word separator).</desc>
                </valItem>
                <valItem ident="d">
                  <desc>dash (syllable separator).</desc>
                </valItem>
                <valItem ident="u">
                  <desc>underscore (syllable extension).</desc>
                </valItem>
                <valItem ident="t">
                  <desc>tilde (syllable elision).</desc>
                </valItem>
                <valItem ident="c">
                  <desc>circumflex [angled line above] (syllable elision).</desc>
                </valItem>
                <valItem ident="v">
                  <desc>caron [angled line below] (syllable elision).</desc>
                </valItem>
                <valItem ident="i">
                  <desc>inverted breve [curved line above] (syllable elision).</desc>
                </valItem>
                <valItem ident="b">
                  <desc>breve [curved line below] (syllable elision).</desc>
                </valItem>
                <valItem ident="h">
                  <desc>double hyphen.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>

        <!-- revision of att.proport.log to add mse:affects -->
        <classSpec ident="att.proport.log" module="MEI.mensural" type="atts" mode="change">
          <desc>Logical domain attributes. These attributes describe augmentation or diminution of
            the normal value of the notes in mensural notation as a ratio.</desc>
          <classes>
            <memberOf key="att.duration.ratio"/>
          </classes>
          <attList>
            <attDef ident="affected" ns="http://github.com/annplaksin/mensural_sourceEncoding"
              usage="opt" mode="add">
              <desc>Names the note value which is affected by the proportion.</desc>
              <datatype>
                <rng:ref name="data.DURATION"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>

        <!-- revision of @altsym for predefined symbols -->
        <classSpec ident="att.altsym" module="MEI.shared" type="atts" mode="change">
          <desc>Attributes supplying pointers to user-defined symbols.</desc>
          <attList>
            <attDef ident="altsym" usage="opt" mode="replace">
              <desc>provides a way of pointing to a user-defined symbol. It must contain an ID of a
                &lt;symbolDef&gt; element elsewhere in the document.</desc>
              <valList type="closed">
                <valItem ident="#Mensur_Ccut">
                  <desc>Tempus imperfectum diminutum</desc>
                </valItem>
                <valItem ident="#Mensur_C">
                  <desc>Tempus imperfectum prolatio minor</desc>
                </valItem>
                <valItem ident="#Mensur_Cdot">
                  <desc>Tempus imperfectum prolatio maior</desc>
                </valItem>
                <valItem ident="#Mensur_Circle">
                  <desc>Tempus perfectum prolatio minor</desc>
                </valItem>
                <valItem ident="#Mensur_CircleDot">
                  <desc>Tempus perfectum prolatio maior</desc>
                </valItem>
                <valItem ident="#Mensur_CircleCut">
                  <desc>Tempus perfectum diminutum</desc>
                </valItem>
                <valItem ident="#Mensur_CircleDotCut">
                  <desc>Tempus perfectum prolatio maior diminutum</desc>
                </valItem>
                <valItem ident="#Mensur_Cinverted">
                  <desc>Tempus imperfectum diminutum</desc>
                </valItem>
                <valItem ident="#Mensur_CinvertedCut">
                  <desc>Tempus imperfectum quadrupla diminutum</desc>
                </valItem>
                <valItem ident="#Proportion_3">
                  <desc>Proportion 3</desc>
                </valItem>
                <valItem ident="#Proportion_3CircleAbove">
                  <desc>Proportion three with circle above</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>
        
        <!-- changed @n datatype to token -->
        <classSpec ident="att.common" module="MEI.shared" type="atts" mode="change">
          <desc>Attributes common to many elements.</desc>
          <classes>
            <memberOf key="att.id"/>
          </classes>
          <attList>
            <attDef ident="n" usage="opt" mode="replace">
              <desc>provides a name or number designation for an element. While the value need not be
                unique, it is required to be a single token.</desc>
              <datatype>
                <rng:data type="token"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>

        <!-- special schematron rules for source based encoding of mensural music -->
        <!-- no accidentals within note -->
        <constraintSpec ident="accidAncestors" scheme="schematron">
          <constraint>
            <sch:rule context="mei:accid">
              <sch:assert test="not(parent::mei:note)">An accidental is not allowed as child element
                of a note within mensural source encoding.</sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>
        
        <!-- attributes of accid -->
        <constraintSpec ident="accidAttributes" scheme="schematron">
          <constraint>
            <sch:rule context="mei:accid">
              <sch:assert test="@accid and @ploc and @oloc">
                Accid needs @accid, @ploc, and @oloc.
              </sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>
        
        <!-- Attributes of proport -->
        <constraintSpec ident="proportAtts" scheme="schematron">
          <constraint>
            <sch:rule context="mei:proport">
              <sch:assert test="@altsym and @num and @numbase and @*[local-name() = 'affected']">
                Proport needs @num, @numbase, @altsym, and @mse:affects.
              </sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>
        
        <!-- mensur attributes -->
        <constraintSpec ident="mensurAtts" scheme="schematron">
          <constraint>
            <sch:rule context="mei:mensur">
              <sch:assert test="@altsym and @tempus and @prolatio">
                Mensur needs @altsym, @tempus, and @prolatio.
              </sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>
        
        <!-- Ligature needs form -->
        <constraintSpec ident="ligatureForm" scheme="schematron">
          <constraint>
            <sch:rule context="mei:ligature">
              <sch:assert test="@form">Ligature needs a form attribute.</sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>
        
        
        <!-- punctum is not allowed within note element -->
        <constraintSpec ident="punctum" scheme="schematron">
          <constraint>
            <sch:rule context="mei:dot">
              <sch:assert test="not(ancestor::mei:note)">A dot cannot be a descendant element of a
                note.</sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>
        
        <!-- Notes with a following dot need @num and @numbase -->
        <constraintSpec ident="dotAfterNote" scheme="schematron">
          <constraint>
            <sch:rule context="mei:note[following-sibling::*[1]/local-name() = 'dot']">
              <sch:assert test="@num  and @numbase">
                Notes with a following dot need @num and @numbase.
              </sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>
        
        <!-- custos need @pname and @oct -->
        <constraintSpec ident="custosPos" scheme="schematron">
          <constraint>
            <sch:rule context="mei:custos">
              <sch:assert test="@pname  and @oct">
                Custos need @pname and @oct.
              </sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>
        
        <!-- keyAccid need @pname and @oct -->
        <constraintSpec ident="keyAccidPos" scheme="schematron">
          <constraint>
            <sch:rule context="mei:keyAccid">
              <sch:assert test="@pname  and @oct">
                keyAccid need @pname and @oct.
              </sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>
        
        <!-- Why is att.commonPart not part of att.common??? -->
        <classSpec ident="att.common" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes common to many elements.</desc>
          <classes>
            <memberOf key="att.commonPart"/>
          </classes>
          <attList>
            <attDef ident="n" usage="opt">
              <desc>Provides a number-like designation for an element.</desc>
              <datatype>
                <rng:ref name="token"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.commonPart" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes that form the basis of the att.common class.</desc>
          <classes>
            <memberOf key="att.id"/>
          </classes>
          <attList>
            <attDef ident="label" usage="opt">
              <desc>Provides a name or label for an element. The value may be any string.</desc>
              <datatype>
                <rng:data type="string"/>
              </datatype>
            </attDef>
            <!--<attDef ident="base" ns="http://www.w3.org/XML/1998/namespace" usage="opt">-->
            <attDef ident="xml:base" usage="opt">
              <desc>Provides a base URI reference with which applications can resolve relative URI
                references into absolute URI references.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        
        <!-- allow mse namespace -->
        <macroSpec ident="macro.anyXML" module="MEI.shared" mode="replace">
          <desc>Permits any XML elements except those from the MEI, MSE or SVG namespace.</desc>
          <content>
            <rng:element>
              <rng:anyName>
                <rng:except>
                  <rng:nsName ns="http://www.music-encoding.org/ns/mei"/>
                  <rng:nsName ns="http://www.w3.org/2000/svg"/>
                  <rng:nsName ns="http://github.com/annplaksin/mensural_sourceEncoding"/>
                </rng:except>
              </rng:anyName>
              <rng:zeroOrMore>
                <rng:attribute>
                  <rng:anyName/>
                </rng:attribute>
              </rng:zeroOrMore>
              <rng:zeroOrMore>
                <rng:choice>
                  <rng:text/>
                  <rng:ref name="macro.anyXML"/>
                </rng:choice>
              </rng:zeroOrMore>
            </rng:element>
          </content>
        </macroSpec>

      </schemaSpec>
    </body>
  </text>
</TEI>
